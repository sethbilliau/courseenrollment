if (coin < acceptance_prob) {
return(x_prop)
} else {
return(x)
}
}
# initialize
Xs = c()
X_0 = rnorm(1)
for(i in 1:N) {
X_prop = rnorm(1, rho * X_0, sqrt(1- rho^2))
X_0 = acceptance(X_0, X_prop)
Xs = c(Xs, X_0)
}
return(c(mean(Xs), var(Xs)))
}
N_samples = 100
N_sims = 10^3
soln_3c = function(rho, N = N_samples) {
prop_density = function(x_prop, x_0) {
dnorm(x_prop, rho * x_0, sqrt(1- rho^2))
}
acceptance = function(x, x_prop) {
coin = runif(1)
acceptance_prob = (dnorm(x_prop) / dnorm(x) )*
(prop_density(x,x_prop) / prop_density(x_prop,x))
if (coin < acceptance_prob) {
return(x_prop)
} else {
return(x)
}
}
# initialize
Xs = c()
X_0 = rnorm(1)
for(i in 1:N) {
X_prop = rnorm(1, rho * X_0, sqrt(1- rho^2))
X_0 = acceptance(X_0, X_prop)
Xs = c(Xs, X_0)
}
return(c(mean(Xs), var(Xs)))
}
rho=0.5
simulator_3c = function(rho_new, N_sims = N_sims) {
df = replicate(N_sims, soln_3c(rho_new))
X_mean_est = mean(unlist(df[1, ]))
X_var_est =  mean(unlist(df[2, ]))
return(list(mean=X_mean_est, var=X_var_est))
}
Xs = simulator_3c(.5)
soln_3c = function(rho, N = N_samples) {
prop_density = function(x_prop, x_0) {
dnorm(x_prop, rho * x_0, sqrt(1- rho^2))
}
acceptance = function(x, x_prop) {
coin = runif(1)
acceptance_prob = (dnorm(x_prop) / dnorm(x) )*
(prop_density(x,x_prop) / prop_density(x_prop,x))
if (coin < acceptance_prob) {
return(x_prop)
} else {
return(x)
}
}
# initialize
Xs = c()
X_0 = rnorm(1)
for(i in 1:N) {
X_prop = rnorm(1, rho * X_0, sqrt(1- rho^2))
X_0 = acceptance(X_0, X_prop)
Xs = c(Xs, X_0)
}
return(c(mean(Xs), var(Xs)))
}
rho=0.5
simulator_3c = function(rho_new, N_sims = 10^3) {
df = replicate(N_sims, soln_3c(rho_new))
X_mean_est = mean(unlist(df[1, ]))
X_var_est =  mean(unlist(df[2, ]))
return(list(mean=X_mean_est, var=X_var_est))
}
Xs = simulator_3c(.5)
Xs
results = c()
rbind(results,Xs)
simulator_3c = function(rho_new, N_sims = 10^3) {
df = replicate(N_sims, soln_3c(rho_new))
X_mean_est = mean(unlist(df[1, ]))
X_var_est =  mean(unlist(df[2, ]))
return(list(rho = rho_new, mean=X_mean_est, var=X_var_est))
}
for(rho in c(-.9,.9,-.5,.5,-.1,.1)){
Xs = simulator_3c(rho)
results = rbind(results,Xs)
}
results
set.seed(171)
for(rho in c(-.9,.9,-.5,.5,-.1,.1)){
Xs = simulator_3c(rho)
results = rbind(results,Xs)
}
for(rho in c(-.9,.9,-.5,.5,-.1,.1)){
Xs = simulator_3c(rho)
results = rbind(results,Xs)
}
results
results
(result
results = c()
set.seed(171)
results = c()
set.seed(171)
for(rho in c(-.9,.9,-.5,.5,-.1,.1)){
Xs = simulator_3c(rho)
results = rbind(results,Xs)
}
results
N_samples = 100
soln_3c = function(rho, N = N_samples) {
prop_density = function(x_prop, x_0) {
dnorm(x_prop, rho * x_0, sqrt(1- rho^2))
}
acceptance = function(x, x_prop) {
coin = runif(1)
acceptance_prob = (dnorm(x_prop) / dnorm(x) )*
(prop_density(x,x_prop) / prop_density(x_prop,x))
if (coin < acceptance_prob) {
return(x_prop)
} else {
return(x)
}
}
# initialize
Xs = c()
X_0 = rnorm(1)
for(i in 1:N) {
X_prop = rnorm(1, rho * X_0, sqrt(1- rho^2))
X_0 = acceptance(X_0, X_prop)
Xs = c(Xs, X_0)
}
return(c(mean(Xs), var(Xs)))
}
simulator_3c = function(rho_new, N_sims = 10^3) {
df = replicate(N_sims, soln_3c(rho_new))
X_mean_est = mean(unlist(df[1, ]))
X_var_est =  mean(unlist(df[2, ]))
return(list(rho = rho_new, mean=X_mean_est, var=X_var_est))
}
results = c()
set.seed(171)
for(rho in c(-.9,.9,-.5,.5,-.1,.1)){
Xs = simulator_3c(rho)
results = rbind(results,Xs)
}
results
?rgeom
t <- 4
lamba <- 2
N <- rpois(1, lambda*t)
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
unifs
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3))
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
length(which(arrivals < 3)) * length(which(arrivals < 4))
# poissonsim.R
# Section 6.5
# Simulating a Poisson process
results_5a = c()
for(i in 1:10000) {
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
results_5a = c(results_51, length(which(arrivals < 3)) * length(which(arrivals < 4)))
}
# poissonsim.R
# Section 6.5
# Simulating a Poisson process
results_5a = c()
for(i in 1:10000) {
t <- 4
lambda <- 2
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
}
# poissonsim.R
# Section 6.5
# Simulating a Poisson process
results_5a = c()
t <- 4
lambda <- 2
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
}
results_5a
mean(results_5a)
# poissonsim.R
# Section 6.5
# Simulating a Poisson process
results_5a = c()
t <- 4
lambda <- 2
set.seed(171)
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
}
mean(results_5a)
arrivals
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
arrivals
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
results_5c = c(results_5c,arrivals[3]*arrivals[4])
}
mean(results_5a)
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
results_5c = c(results_5c,arrivals[3]*arrivals[4])
}
results_5c = c()
t <- 4
lambda <- 2
set.seed(171)
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
results_5c = c(results_5c,arrivals[3]*arrivals[4])
}
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
results_5c = c(results_5c,arrivals[3]*arrivals[4])
}
mean(results_5a)
mean(results_5a)
mean(results_5c)
mean(results_5c)
arrivals[3]
arrivals[4]
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
if (!is.na(arrivals[3]*arrivals[4])){
results_5c = c(results_5c,arrivals[3]*arrivals[4])
}
}
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
if (!is.na(arrivals[3]*arrivals[4])){
results_5c = c(results_5c,arrivals[3]*arrivals[4])
}
}
mean(results_5a)
mean(results_5c)
mean(results_5c)
results_5c
mean(results_5c, na.rm = T)
# poissonsim.R
# Section 6.5
# Simulating a Poisson process
results_5a = c()
results_5c = c()
t <- 7
lambda <- 2
set.seed(171)
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
if (!is.na(arrivals[3]*arrivals[4])){
results_5c = c(results_5c,arrivals[3]*arrivals[4])
}
}
mean(results_5c, na.rm = T)
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
results_5b = c(results_5b,unifs[3]*unifs[4])
if (!is.na(arrivals[3]*arrivals[4])){
results_5c = c(results_5c,arrivals[3]*arrivals[4])
}
}
results_5b = c()
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
results_5b = c(results_5b,unifs[3]*unifs[4])
if (!is.na(arrivals[3]*arrivals[4])){
results_5c = c(results_5c,arrivals[3]*arrivals[4])
}
}
mean(results_5b)
mean(results_5b, na.rm=T)
unifs[3]*unifs[4]
unifs
t <- 4
lambda <- 2
set.seed(171)
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
results_5b = c(results_5b,unifs[3]*unifs[4])
if (!is.na(arrivals[3]*arrivals[4])){
results_5c = c(results_5c,arrivals[3]*arrivals[4])
}
}
for(i in 1:10000) {
N <- rpois(1, lambda*t)
unifs <- runif(N,0,t)
arrivals <- sort(unifs)
results_5a = c(results_5a, length(which(arrivals < 3)) * length(which(arrivals < 4)))
results_5b = c(results_5b,unifs[3]*unifs[4])
if (!is.na(arrivals[3]*arrivals[4])){
results_5c = c(results_5c,arrivals[3]*arrivals[4])
}
}
mean(results_5a)
mean(results_5b, na.rm = T)
unifs
N
arrivals
unifs
factorial(3) / factorial(2)
3 * (6/10)^2 * (1/10)^2
3 * (6/10)^2 * (1/10)
3 * (6/10)^2 * (1/10)
(16/3) * exp(-20/3)
(16/3) * exp(-20/3)
