df = cbind.data.frame(CXCL12, POSTN, BRCA1, Outcome)
df
ggplot(df, aes(CXCL12, POSTN, colour = Outcome)) +
geom_point()
make_graph = function(gene1, gene2) {
p = ggplot(df, aes(gene1, gene2, colour = Outcome)) +
geom_point()
return(p)
}
p_CXCL12vPOSTN = make_graph(CXCL12, POSTN)
p_CXCL12vPOSTN
p_CXCL12vBRCA1 = ggplot(df, aes(CXCL12, BRCA1, colour = Outcome)) +
geom_point()
library(ggplot2)
# convert YY to outcome for nice-looking legend
Outcome = YY
Outcome[Outcome == 1] <- "Suboptimal"
Outcome[Outcome == 0] <- "Optimal"
df = cbind.data.frame(CXCL12, POSTN, BRCA1, Outcome)
p_CXCL12vPOSTN = ggplot(df, aes(CXCL12, POSTN, colour = Outcome)) +
geom_point()
p_CXCL12vBRCA1 = ggplot(df, aes(CXCL12, BRCA1, colour = Outcome)) +
geom_point()
p_POSTNvBRCA1 = ggplot(df, aes(POSTN, BRCA1, colour = Outcome)) +
geom_point()
p_CXCL12vPOSTN; p_CXCL12vBRCA1; p_POSTNvBRCA1
# Get densities
ffx = density(CXCL12[YY == FALSE])$x
ff0 = density(CXCL12[YY == FALSE])$y
ff1 = density(CXCL12[YY == TRUE])$y
# Get probabilities given prevalence = 0.25
prev = 0.25
ppv = prev * ff1 / (prev * ff1 + (1-prev) * ff0)
plot(ffx, ppv, ylim = c(0,1),
xlab = "CXCL12 Expression",
ylab="Probability of optimal debulking",
main = "Probability of optimal debulking given CXCL12 Expression and prev = 0.25",
type = "l", lwd=2)
# Get densities
ffx = density(CXCL12[YY == FALSE])$x
ff0 = density(CXCL12[YY == FALSE])$y
ff1 = density(CXCL12[YY == TRUE])$y
# Get probabilities given prevalence = 0.25
prev = 0.25
ppv = prev * ff1 / (prev * ff1 + (1-prev) * ff0)
plot(ffx, ppv, ylim = c(0,1),
xlab = "CXCL12 Expression",
ylab="Probability of optimal debulking",
main = "Prob. of optimal debulking given CXCL12 Expression, prev = 0.25",
type = "l", lwd=2)
# Get densities
ffx = density(CXCL12[YY == FALSE])$x
ff0 = density(CXCL12[YY == FALSE])$y
ff1 = density(CXCL12[YY == TRUE])$y
# Get probabilities given prevalence = 0.25
prev = 0.25
ppv = prev * ff1 / (prev * ff1 + (1-prev) * ff0)
plot(ffx, ppv, ylim = c(0,1),
xlab = "CXCL12 Expression",
ylab="Probability of optimal debulking",
main = "Prob. of optimal debulking vs. CXCL12 Expression, prev = 0.25",
type = "l", lwd=2)
results
df = data.frame(results)
df
p <- ggplot(results, aes(sample = results))+  stat_qq() + stat_qq_line()
p
p <- ggplot(results, aes(sample = results)) + stat_qq() + stat_qq_line()
p
p <- ggplot(results, aes(sample = results)) + stat_qq() + stat_qq_line()
p <- ggplot(df, aes(sample = results)) + stat_qq() + stat_qq_line()
p
# Compare the empirical CDF and a histogram of the results to the
# theoretical standard normal
p0 = qplot(results, geom = 'blank') +
geom_line(aes(y = ..density.., colour = 'Empirical'), stat = 'density') +
stat_function(fun = function(x) dnorm(x), aes(colour = 'Normal')) +
geom_histogram(aes(y = ..density..), alpha = 0.4) +
scale_colour_manual(name = 'Density', values = c('red', 'cornflowerblue')) +
theme(legend.position = c(0.85, 0.85))
p0
p <- ggplot(df, aes(sample = results)) + stat_qq() + stat_qq_line() +
p
p <- ggplot(df, aes(sample = results)) + stat_qq() + stat_qq_line() +
p
p <- ggplot(df, aes(sample = results)) + stat_qq() + stat_qq_line()
p
p0
df = data.frame(results)
p <- ggplot(df, aes(sample = results)) + stat_qq() + stat_qq_line() +
ggtitle("QQplot of Results")
p
p0
p
ecdf(results)
ecdf(results)
ecdf(results)
plot(ecdf(results))
get_error = function(x) {
ecdf(x, results) - pnorm(x)
}
plot(get_error)
get_error = function(x) {
ecdf(x, results) - pnorm(x)
}
get_error = function(x) {
return(ecdf(x, results) - pnorm(x))
}
plot(get_error)
?ecdf
ecdf(3, results)
results < 3
mean(results < 3)
get_error = function(x) {
return(mean(results < x) - pnorm(x))
}
plot(get_error)
plot(x, get_error(x), main="The Sine Function",
ylab="sin(x)")
get_error = function(x) {
return(mean(results < x) - pnorm(x))
}
get_error = function(x) {
return(mean(results <= x) - pnorm(x))
}
x <- seq(-4,4,0.01)
plot(x, get_error(x), main="The Sine Function",
ylab="sin(x)")
plot(x, get_error(x), main="The Sine Function",
ylab="sin(x)",
type="l",)
plot(x, get_error(x), main="The Sine Function",
ylab="sin(x)",
type="l")
mean(results <= 4)
results <= 4
pnorm(-4)
results <= -4)
mean(results <= -4)
get_error = function(x) {
return(mean(results <= x) - pnorm(x))
}
x <- seq(-4,4,0.01)
plot(x, get_error(x), main="The Sine Function",
ylab="sin(x)",
type="l")
get_error(x)
get_error(-4)
x <- seq(-4,4,0.01)
x
errors <- apply(x, 2, get_error)
errors <- apply(x, 1, get_error)
errors
x
errors <- sapply(x, get_error)
errors
plot(x, errors, main="The Sine Function",
ylab="sin(x)",
type="l")
plot(x, abs(errors), main="The Sine Function",
ylab="sin(x)",
type="l")
upperbounderror = 0.4748 * (3/8)
upperbounderror = 0.4748 * (3/8)
x <- seq(-4,4,0.01)
errors <- sapply(x, get_error)
plot(x, abs(errors), main="Error vs. x",
ylab="|Empirical - Theoretical|",
xlab="x",
type="l")
plot(x, abs(errors), main="Error vs. x",
ylab="|Empirical - Theoretical|",
xlab="x",
type="l")
abline(h=upperbounderror)
type="l", ylim=c(0,upperbounderror +.01)
plot(x, abs(errors), main="Error vs. x",
ylab="|Empirical - Theoretical|",
xlab="x",
type="l", ylim=c(0,upperbounderror +.01))
abline(h=upperbounderror)
plot(x, abs(errors), main="Error vs. x",
ylab="|Empirical - Theoretical|",
xlab="x",
type="l", ylim=c(0,upperbounderror +.01))
abline(h=upperbounderror)
upperbounderror
upperbounderror
plot(x, abs(errors), main="Error vs. x",
ylab="|Empirical - Theoretical|",
xlab="x",
type="l")
results
max(abs(errors))
install.packages("faraway")
# Check for #8
Q = cbind(c(0.3,0.5),c(.2,.1))
R= c(0.5,0.4)
I
I - Q
IQ = cbind(c(1,0),c(0,1)) - Q
IQ
IQ_inv = solve(IQ)
IQ_inv
IQ_inv %*% R
# Stat 171 hw3
A <- cbind(c(.4,.6,.4), c(.4,.2,.2), c(0.2,0.2,0.4))
A
eigen(A)
P <- eigen$vectors
eigen
P <- eigen(A)$vectors
diag(eigen(A)$values)
Pinv <- solve(P)
P
A20 = A %^% 20
A20
A20
# Get probabilities given prevalence = 0.25
prev = 0.75
ppv = prev * ff1 / (prev * ff1 + (1-prev) * ff0)
plot(ffx, ppv, ylim = c(0,1),
xlab = "CXCL12 Expression",
ylab="Probability of optimal debulking",
main = "Prob. of optimal debulking vs. CXCL12 Expression, prev = 0.25",
type = "l", lwd=2)
# Get densities
ffx = density(CXCL12[YY == FALSE])$x
ff0 = density(CXCL12[YY == FALSE])$y
ff1 = density(CXCL12[YY == TRUE])$y
# Get probabilities given prevalence = 0.25
prev = 0.75
ppv = prev * ff1 / (prev * ff1 + (1-prev) * ff0)
plot(ffx, ppv, ylim = c(0,1),
xlab = "CXCL12 Expression",
ylab="Probability of optimal debulking",
main = "Prob. of optimal debulking vs. CXCL12 Expression, prev = 0.25",
type = "l", lwd=2)
ff0
ff0 = density(CXCL12[YY == FALSE])$y
ff1 = density(CXCL12[YY == TRUE])$y
# Get probabilities given prevalence = 0.25
prev = 1- 0.25
ppv = prev * ff1 / (prev * ff1 + (1-prev) * ff0)
plot(ffx, ppv, ylim = c(0,1),
xlab = "CXCL12 Expression",
ylab="Probability of optimal debulking",
main = "Prob. of optimal debulking vs. CXCL12 Expression, prev = 0.25",
type = "l", lwd=2)
P%*%Pinv
A20 = A %^% 20
A20
P%*%D %*%Pinv
P <- eigen(A)$vectors
D <- diag(eigen(A)$values)
Pinv <- solve(P)
P%*%D %*%Pinv
P
P%*%D^10 %*%Pinv
A20
P
P
A*10
P <- eigen(A)$vectors
P
A
A20
.2/.29166
c(1,0,0) %*% A20
c(0,1,0) %*% A20
.4 / .25
.2/.29
.4/.458
.25*.2
0.05/.29
A20
eigen(A)$vectors
D <- diag(eigen(A)$values)
P <- eigen(A)$vectors
D <- diag(eigen(A)$values)
Pinv <- solve(P)
Pinv
P <- eigen(A)$vectors
P
D <- diag(eigen(A)$values)
D
eigen(A)$vectors
P[,2] / p[3,2]
P[,2] / P[3,2]
P <- cbind(c(1,1,1), c(-5,7,1), c(-1,-1, 3))
D <- diag(eigen(A)$values)
Pinv <- solve(P)
Pinv
4/7
3/7
.4583/.083
P
D
Pinv / 24
Pinv * 24
11/24
A20
P%*%D
P%*%D^2
Pinv
P%*%D^10 %*%Pinv
P%*%D^10
D^10 %*%Pinv
P%*%D^10
Y <- 1*c(pData(TCGA_eset)[,"recurrence_status"] == "recurrence")
X <- exprs(TCGA_eset)
color_labels <- ifelse(pData(TCGA_eset)[,"recurrence_status"] == "recurrence", "red", "blue")
marker <- "ANO1"
par(mfrow = c(1,1))
plot(X["A1CF",], X[marker,], main = "A1CF and ANO1",col=color_labels,pch=19,xlab="A1CF",ylab="ANO1", cex = 0.6)
# Logistic Regression
model <- glm(Y ~ X["A1CF",] + X[marker,], family = binomial(link = "logit"))
# Create the logistic regression model
predictions <- predict(model)
# Extract the predictions from the model
predictions.object  <- prediction(predictions,Y)
# Create prediction object for ROCR
predictions.performance <- performance(predictions.object, measure = "tpr", x.measure = "fpr")
predictions.auc <- performance(predictions.object, measure = "auc")
unlist(predictions.auc@y.values)
# Create the ROC curve for the new predictions
plot(predictions.performance, col = "blue")
plot(roc.perf, add = T, col = "green")
library(knitr)
opts_chunk$set(tidy=TRUE, tidy.opts=list(width.cutoff=60), echo = F)
# This global chunk allows us to prevent code from running off the page.
library(ROCR)
data(ROCR.simple) # One set of prediction and labels dataset
head(cbind(ROCR.simple$predictions, ROCR.simple$labels), 5)
pred <- prediction(ROCR.simple$predictions,ROCR.simple$labels)
# Create the performance object
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
#Plots true positive rate vs. false positive rate.
plot(roc.perf)
#The 45 degree line represents the average performance of a Unif(0,1) random variable.
abline(a=0, b= 1, col = "red")
auc.perf = performance(pred, measure = "auc")
auc.perf@y.values
library(curatedOvarianData)
# data(package="curatedOvarianData") # Shows datasets that are available
data(TCGA_eset) # Calls out the TCGA_eset dataset that we want
head(TCGA_eset)
head(exprs(TCGA_eset)["A1CF",]) # Predictions for this gene
head(pData(TCGA_eset)[,"recurrence_status"]) # True cancer labels
# pData below returns a data frame with samples as rows, variables as columns.
#Ex: TCGA.23.1122 means we are looking at patient id 1122 and hospital 23
pred <- prediction(exprs(TCGA_eset)["A1CF",],pData(TCGA_eset)[,"recurrence_status"])
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
#Plots true positive rate vs. false positive rate.
plot(roc.perf)
#The 45 degree line represents the average performance of a Unif(0,1) random variable.
abline(a=0, b=1, col = 'red')
auc.perf <- performance(pred, measure = "auc")
auc.perf@y.values
Y <- 1*c(pData(TCGA_eset)[,"recurrence_status"] == "recurrence")
X <- exprs(TCGA_eset)
color_labels <- ifelse(pData(TCGA_eset)[,"recurrence_status"] == "recurrence", "red", "blue")
marker <- "ANO1"
par(mfrow = c(1,1))
plot(X["A1CF",], X[marker,], main = "A1CF and ANO1",col=color_labels,pch=19,xlab="A1CF",ylab="ANO1", cex = 0.6)
# Logistic Regression
model <- glm(Y ~ X["A1CF",] + X[marker,], family = binomial(link = "logit"))
# Create the logistic regression model
predictions <- predict(model)
# Extract the predictions from the model
predictions.object  <- prediction(predictions,Y)
# Create prediction object for ROCR
predictions.performance <- performance(predictions.object, measure = "tpr", x.measure = "fpr")
predictions.auc <- performance(predictions.object, measure = "auc")
unlist(predictions.auc@y.values)
# Create the ROC curve for the new predictions
plot(predictions.performance, col = "blue")
plot(roc.perf, add = T, col = "green")
abline(a=0, b=1, col = 'red')
# Alternative view and look
library(GGally)
df <- data.frame(A1CF = X["A1CF",],ANO1 = X["ANO1",])
ggpairs(df, columns = 1:2, ggplot2::aes(colour=pData(TCGA_eset)[,"recurrence_status"]))
df
ggpairs(df, columns = 1:3, ggplot2::aes(colour=pData(TCGA_eset)[,"recurrence_status"]))
ggpairs(df, columns = 1:2, ggplot2::aes(colour=pData(TCGA_eset)[,"recurrence_status"]))
auc.perf = performance(pred, measure = "auc")
auc.perf@y.values
auc.perf = performance(pred, measure = "auc")
auc.perf@y.values
# data(package="curatedOvarianData") # Shows datasets that are available
data(TCGA_eset) # Calls out the TCGA_eset dataset that we want
head(exprs(TCGA_eset)["A1CF",]) # Predictions for this gene
head(pData(TCGA_eset)[,"recurrence_status"]) # True cancer labels
# pData below returns a data frame with samples as rows, variables as columns.
#Ex: TCGA.23.1122 means we are looking at patient id 1122 and hospital 23
pred <- prediction(exprs(TCGA_eset)["A1CF",],pData(TCGA_eset)[,"recurrence_status"])
roc.perf = performance(pred, measure = "tpr", x.measure = "fpr")
#Plots true positive rate vs. false positive rate.
plot(roc.perf)
#The 45 degree line represents the average performance of a Unif(0,1) random variable.
abline(a=0, b=1, col = 'red')
head(TCGA_eset)
library(ROCR)
# Get genes
CXCL12 = XX["CXCL12",]
POSTN = XX["POSTN",]
BRCA1 = XX["BRCA1",]
# Function to get AUC
get_auc = function(gene) {
pred = prediction(gene, YY)
auc = performance(pred, 'tpr', 'fpr')
return(auc)
}
# Get AUCs
auc_CXCL12 = get_auc(CXCL12)
auc_POSTN = get_auc(POSTN)
auc_BRCA1 = get_auc(BRCA1)
# Plot AUCs
plot(auc_CXCL12,lwd=2, col = "green", main = "ROC")
plot(auc_POSTN,lwd=2, col = "cornflowerblue", add = T)
plot(auc_BRCA1,lwd=2, col = "red", add = T)
abline(0,1,col="black")
legend(.8, .5, legend=c("CXCL12", "POSTN", "BRCA1"),
col=c("green", "cornflowerblue", "red"), lty=1, cex=0.8)
# Logistic Regression
model <- glm(Y ~ X["A1CF",] + X[marker,], family = binomial(link = "logit"))
# Logistic Regression
model <- glm(Y ~ X["A1CF",] + X[marker,], family = binomial(link = "logit"))
# Create the logistic regression model
predictions <- predict(model)
# Extract the predictions from the model
predictions.object  <- prediction(predictions,Y)
predictions.auc <- performance(predictions.object, measure = "auc")
unlist(predictions.auc@y.values)
# Get densities
ffx = density(CXCL12[YY == FALSE])$x
ff0 = density(CXCL12[YY == FALSE])$y
ff1 = density(CXCL12[YY == TRUE])$y
# Get probabilities given prevalence = 0.25
prev = 1- 0.25
ppv = (1-prev) * ff0 / (prev * ff1 + (1-prev) * ff0)
plot(ffx, ppv, ylim = c(0,1),
xlab = "CXCL12 Expression",
ylab="Probability of optimal debulking",
main = "Prob. of optimal debulking vs. CXCL12 Expression, prev = 0.25",
type = "l", lwd=2)
plot(CXCL12, YY)
# Get probabilities given prevalence = 0.25
prev = 0.25
ppv = prev * ff0 / ((1-prev) * ff1 + ff1 * ff0)
plot(ffx, ppv, ylim = c(0,1),
xlab = "CXCL12 Expression",
ylab="Probability of optimal debulking",
main = "Prob. of optimal debulking vs. CXCL12 Expression, prev = 0.25",
type = "l", lwd=2)
# Get densities
ffx = density(CXCL12[YY == FALSE])$x
ff0 = density(CXCL12[YY == FALSE])$y
ff1 = density(CXCL12[YY == TRUE])$y
# Get probabilities given prevalence = 0.25
prev = 0.25
ppv = prev * ff0 / ((1-prev) * ff1 + prev * ff0)
plot(ffx, ppv, ylim = c(0,1),
xlab = "CXCL12 Expression",
ylab="Probability of optimal debulking",
main = "Prob. of optimal debulking vs. CXCL12 Expression, prev = 0.25",
type = "l", lwd=2)
# Get densities
ffx = density(CXCL12[YY == FALSE])$x
ff0 = density(CXCL12[YY == FALSE])$y
ff1 = density(CXCL12[YY == TRUE])$y
# Get probabilities given prevalence = 0.25
prev = 0.25
ppv = prev * ff0 / ((1-prev) * ff1 + prev * ff0)
plot(ffx, ppv, ylim = c(0,1),
xlab = "CXCL12 Expression",
ylab="Probability of optimal debulking",
main = "Prob. of optimal debulking vs. CXCL12 Expression, prev = 0.25",
type = "l", lwd=2)
pbirthday(33)
?pbirthday
seq(1,33,1)
x = seq(1,33,1)
sum(x * dbirthday(x))
?dbirthday
sum(x * pbirthday(x))
pbirthay(33)
pbirthday(33)
# 3
A <- cbind(c(.4,.6,0), c(.05,.95,0), c(0,0,1))
A
A %*% 20
# 3
A <- cbind(c(.4,.6,0), c(.05,.95,0), c(0,0,1))
A %*% 20
A %^% 20
A <- cbind(c(1,0),c(0,1))
A%^%20
A%^%21
c(1,0) %*% A%^%21
c(1,0) %*% (A%^%21)
c(0,1) %*% (A%^%21)
# 3
A <- cbind(c(.4,.6,0), c(.05,.95,0), c(0,0,1))
A %^% 20
eigen(A)$vectors
eigen(A)$values
# 3
A <- cbind(c(.4,.6,0), c(.05,.95,0), c(0,0,1))
eigen(A)$vectors
eigen(A)$values
